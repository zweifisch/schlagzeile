#!/usr/bin/env python2
import sys, os, json
from pyquery import PyQuery as pq

from beaker.cache import CacheManager
from beaker.util import parse_cache_config_options

from blessings import Terminal

from schlag import Mappers, Scrapers

def init_cache():
	cache_opts = {
		 'cache.type'     : 'file',
		 'cache.data_dir' : '/tmp/cache/data',
		 'cache.lock_dir' : '/tmp/cache/lock'
	}
	cm = CacheManager(**parse_cache_config_options(cache_opts))
	return cm.get_cache('schlagzeile',expire=600)

def get_config():
	site_files = [
		os.path.dirname(os.path.realpath(sys.argv[0]))+os.path.sep+'.schlagzeile.json',
		os.path.dirname(os.path.realpath(sys.argv[0]))+os.path.sep+'schlagzeile.json',
		os.path.expanduser('~')+os.path.sep+'.schlagzeile.json',
	]
	while len(site_files)>0:
		site_file = site_files.pop()
		if(os.path.exists(site_file)):
			return site_file
	return False

def main():
	site_file = get_config()
	if(not site_file):
		print "schlagzeile.json not found"
		sys.exit(1)

	with open(site_file) as fp:
		sites = json.load(fp)

	cache = init_cache()

	mappers = Mappers()
	scrapers = Scrapers()
	term = Terminal()

	for site_name,site in sites.items():
		url = site.get('url')
		scraper = getattr(scrapers, str(site.get('type')), None)
		pattern = site.get('pattern')
		if scraper is None: continue

		def get_raw_html():
			return str(pq(url))

		markup = cache.get(key=url, createfunc=get_raw_html)
		pattern.update({'markup':markup})

		print site_name,"\n",'='*len(site_name)

		items = scraper(**pattern)

		if site.get('mapper'):
			for key,mappers_list in site.get('mapper').items():
				for mapper_type,arg in mappers_list:
					mapper_factory = getattr(mappers,str(mapper_type)+'_mapper',None)
					if mapper_factory:
						items = map(mapper_factory(key,arg),items)

		for index,item in enumerate(items):
			if not item['link'] :
				item['link'] = ''
			else:
				if(item['link'][0:4]!='http'): item['link'] = url+item['link']
			item['title'] = term.cyan(item['title'])
			item.update({
				'index':index+1,
				'indent':' ' * (len(str(index+1))+2)})
			if(item.get('supertitle')):
				print "%(index)d. %(supertitle)s - %(title)s\n%(indent)s%(link)s" % item
			else:
				print "%(index)d. %(title)s\n%(indent)s%(link)s" % item

if __name__ == '__main__':
	main()

